// Font-size px + rem
// ------------------
@mixin font-size( $size, $line-height: false, $is-important: false, $font-size: $base-font-size / 1px ) {
	
	$size: if( unitless( $size ), $size, $size / 1px );

	@if $is-important {
		font-size: $size + px !important;
		font-size: ( $size / $font-size ) + rem !important;
	} @else {
		font-size: $size + px;
		font-size: ( $size / $font-size ) + rem;
	}

	@if $line-height {
		line-height: ceil( $size / $base-line-height ) * ( $base-line-height / $size );
	}
	
}

// Selector px + rem
// http://davidensinger.com/2013/03/using-rems-with-sass/
// ------------------
@mixin pxrem($property, $values) {
	// Create a couple of empty lists as output buffers.
	$font-size-values: $base-font-size;
	$px-values: ();
	$rem-values: ();

	// Loop through the $values list
	@each $value in $values {

		// For each property value, if it's in rem or px, derive both rem and
		// px values for it and add those to the end of the appropriate buffer.
		// Ensure all pixel values are rounded to the nearest pixel.
		@if $value == 0 or $value == 0px {
			// 0 -- use it without a unit
			$px-values: join($px-values, 0);
			$rem-values: join($rem-values, 0);
		} @else if type-of($value) == number and not unitless($value) and (unit($value) == px) {
			// px value given - calculate rem value from font-size
			$new-rem-value: $value / $font-size-values;
			$px-values: join($px-values, round($value));
			$rem-values: join($rem-values, #{$new-rem-value}rem);
		} @else if type-of($value) == number and not unitless($value) and (unit($value) == "%") {
			// % value given - don't add px or rem
			$px-values: join($px-values, #{$value});
			$rem-values: join($rem-values, #{$value});
		} @else if $value == auto {
			// auto - don't add px or rem
			$px-values: join($px-values, auto);
			$rem-values: join($rem-values, auto);
		} @else {
			// unitless value - use those directly as rem and calculate the px-fallback
			$px-values: join($px-values, round($value * $font-size-values));
			$rem-values: join($rem-values, #{$value}rem);
		}

	}

	// output the converted rules
	#{$property}: $px-values;
	#{$property}: $rem-values;
}

// Mixin for placeholder styling
// ------------------
@mixin place-holder($color) {

	&::-webkit-input-placeholder { 
		color: $color; 
	}

	&:-moz-placeholder { 
		color: $color; 
	}

	&:-ms-input-placeholder { 
		color: $color; 
	}
}